---
# You can also start simply with 'default'
theme: seriph
colorSchema: light
# random image from a curated Unsplash collection by Anthony
# like them? see https://unsplash.com/collections/94734566/slidev
# background: #D8BFD8
# some information about your slides (markdown enabled)
title: Full-stack quantum machine learning on hybrid quantum-classical platforms 
info: |
  ## Slidev Starter Template
  Presentation slides for developers.

  Learn more at [Sli.dev](https://sli.dev)
# apply unocss classes to the current slide
class: text-center
# https://sli.dev/features/drawing
drawings:
  persist: false
# slide transition: https://sli.dev/guide/animations.html#slide-transitions
transition: slide-left
# enable MDC Syntax: https://sli.dev/features/mdc
mdc: true
# open graph
# seoMeta:
#  ogImage: https://cover.sli.dev
---

## Full-stack quantum machine learning on hybrid quantum-classical platforms
<br>

### Andrea Papaluca
#### andrea.papaluca@unimi.it

<div class="absolute bottom-4 left-4 flex space-x-8">
<img src="https://www.unidformazione.com/wp-content/uploads/2020/12/unimi-universita-milano-statale-1.png" width="300"></img>
<img src="https://raw.githubusercontent.com/qiboteam/qibo/refs/heads/master/doc/source/_static/qibo_logo_dark.svg" width=250></img>
</div>

<div class="abs-br m-6 text-xl">
  <a href="https://github.com/BrunoLiegiBastonLiegi" target="_blank" class="slidev-icon-btn">
    <carbon:logo-github />
  </a>
</div>

<!--
The last comment block of each slide will be treated as slide notes. It will be visible and editable in Presenter Mode along with the slide. [Read more in the docs](https://sli.dev/guide/syntax.html#notes)
-->

---

# A worldwide open source collaboration

<div class="grid grid-cols-[1fr_2fr] gap-4 place-items-center">
  <img src="static/qibo_github.png">
  <img src="static/qibo_collaboration.png">
</div>
<br>
<div class="grid grid-cols-[2fr_1fr] gap-4 place-items-center">
<div>
<a href="https://arxiv.org/abs/2009.01845" style="font-size: 15px;">"Qibo: a framework for quantum simulation with hardware acceleration"</a>
<br>
<t style="font-size: 15px;">Efthymiou et al, 2020.</t>
</div>
<img src="static/qibo_arxiv_qr.svg" width=100>
</div>

---

# A flexible full-stack ecosystem

<svg class="absolute w-0 h-0">
  <defs>
    <marker id="arrowhead" markerWidth="6" markerHeight="4" refX="6" refY="2" orient="auto">
      <polygon points="0 0, 6 2, 0 4" fill="orange" />
    </marker>
  </defs>
</svg>

<div class="flex justify-center h-full">
<div class="relative w-[600px]">
  <!-- SVG Image -->
  <img
    src="https://raw.githubusercontent.com/qiboteam/xmind-diagrams/refs/heads/master/docs/qibo_ecosystem_webpage.svg"
    class="w-full"
  />

  <!-- Highlight box -->
  <div v-click>
  <div class="absolute top-[1px] left-[423px] w-[180px] h-[211px] border-2 border-blue-500 rounded-md"></div>

  <!-- Annotation label -->
  <div class="absolute top-[-20px] left-[420px] text-xs bg-white px-1 rounded shadow">
    Simulation
  </div>
  </div>
  
  <div v-click>
  <div class="absolute top-[211px] left-[423px] w-[80px] h-[70px] border-2 border-black-500 rounded-md"></div>
  <div class="absolute top-[221px] left-[511px] text-xs bg-white px-1 rounded shadow">
    Remote <br> Access
  </div>
  </div>

  <div v-click>
  <div class="absolute top-[320px] left-[200px] w-[330px] h-[120px] border-2 border-green-500 rounded-md"></div>
  <div class="absolute top-[325px] left-[540px] text-xs bg-white px-1 rounded shadow">
    Selfhosted Hardware<br>(calibration & control)
  </div>
  </div>

  
  <div v-click>
  <div class="absolute top-[281px] left-[108px] w-[83px] h-[35px] border-2 border-orange-500 rounded-md"></div>

<!-- Arrow to Simulation -->
<svg class="absolute top-[115px] left-[170px] w-[260px] h-[160px]" viewBox="0 0 260 160">
  <line x1="0" y1="160" x2="245" y2="0" stroke="orange" stroke-width="1.2" marker-end="url(#arrowhead)" />
</svg>

<!-- Arrow to Remote Access -->
<svg class="absolute top-[245px] left-[200px] w-[245px] h-[120px]" viewBox="0 0 240 60">
  <line x1="0" y1="20" x2="210" y2="-20" stroke="orange" stroke-width="1.2" marker-end="url(#arrowhead)" />
</svg>

<!-- Arrow to Hardware -->
<svg class="absolute top-[312px] left-[170px] w-[250px] h-[60px]" viewBox="0 0 250 60">
  <line x1="0" y1="10" x2="25" y2="20" stroke="orange" stroke-width="1.2" marker-end="url(#arrowhead)" />
</svg>

 <div class="absolute top-[261px] left-[88px] text-xs bg-white px-1 rounded shadow">
    ML Interface
  </div>

  </div>
   
  
</div>
</div>

---

# Quantum Computation through circuits

<div class="grid grid-cols-[2fr_1fr] gap-4 place-items-center">
<div class="grid grid-cols-1 place-items-center">
<img src="static/example_circuit.svg" width="400"/>
<br>
<img src="https://user-images.githubusercontent.com/89847233/263536880-171e4364-a42f-4e63-92d3-da00cbcd9fbb.gif" width="200"/>
</div>
<div>
```python
import numpy as np
from qibo import Circuit, gates

# Construct the circuit
circuit  = Circuit(3)
# Add the gates
for q in range(3):
	circuit.add(gates.RY(q=q, theta=np.random.randn()))
	circuit.add(gates.RZ(q=q, theta=np.random.randn()))
	for q in range(3):
		circuit.add(gates.CRX(
			q%3, (q+1)%3, theta=np.random.randn())
		)
# Execute the circuit and get the final state
result = circuit() 
print(result.state())
```
</div>
</div>

---

# The Qiboml pipeline

<div class="grid grid-cols-1 place-items-center">
	<img src="https://private-user-images.githubusercontent.com/62071516/447570252-5baba39f-fffc-43db-8080-f8acad340c63.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDkwMzYwMzYsIm5iZiI6MTc0OTAzNTczNiwicGF0aCI6Ii82MjA3MTUxNi80NDc1NzAyNTItNWJhYmEzOWYtZmZmYy00M2RiLTgwODAtZjhhY2FkMzQwYzYzLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNTA2MDQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjUwNjA0VDExMTUzNlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTRjNDFhNmI4ZTM4ZTcxMzBmYWZiZmZiYWJmYThjNTg1MjdkZTUxMTgyNzNiN2QwNDI2MjRhMTU4MDJkZmQxMTMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.vdobl-iZU6LtQmuL86cUvoS_S_izakJxRGLFZgbgP4g" width=700/>
</div>

---

# QML models made easy

<div class="grid grid-cols-2 gap-4 items-stretch">

<div>

#### Interface agnostic

```python
from qiboml.models.encoding import PhaseEncoding
from qiboml.models.decoding import Expectation

# Encoding layer
encoding = PhaseEncoding(3, encoding_gate=gates.RX)
structure = []
# Alternate encoding and trainable layers
for _ in range(5):
    structure.extend([encoding, circuit.copy()])	
# Decoding layer
decoding = Expectation(3)
# Prepare some data
x = np.random.uniform(
	0, 2, 300
	).reshape(100, 3) * np.pi
y = np.sin(x).sum(-1) 
```
</div>

<div>
<div v-click=[1]>

#### Torch interface

```python
from qiboml.interfaces.pytorch import QuantumModel
import torch

# This is a torch.nn.Module
q_model = QuantumModel(structure, decoding=decoding)
# you can train it as you normally do for torch 
# models
optimizer = torch.optim.Adam(q_model.parameters())
for epoch in range(10):
    optimizer.zero_grad()
    prediction = torch.stack([
		    q_model(data) 
		    for data in torch.as_tensor(x)
		])
    loss = torch.nn.functional.mse_loss(
		    prediction, 
		    torch.as_tensor(y)
		)
    loss.backward()
    optimizer.step()

```
</div>
<div v-click v-motion
  :initial="{ x: -50, y: -410}"
  :enter="{ x: 0 }"
  :leave="{ x: 50 }">
  
#### Keras interface

```python
from qiboml.interfaces.keras import QuantumModel
import tensorflow as tf

# This is a keras.Model
q_model = QuantumModel(structure, decoding=decoding)
# you can train it as you normally do for keras 
# models
q_model.compile("adam", "mean_squared_error")
q_model.fit(
	tf.convert_to_tensor(x), 
	tf.convert_to_tensor(y), 
	batch_size=1, 
	epochs=10
)
```
</div>
</div>

</div>

---

# Deploy on any device: even selfhosted QPUs!

<div class="grid grid-cols-[1fr_1.5fr] gap-4 items-stretch">

<div>

<br>
<br>

<v-clicks every="2">
	
- ## *Just In Time* (JIT) CPU 

<br>

- ## GPUs

<br>

- ## Cloud Providers

<br>

- ## Selfhosted QPUs
	
</v-clicks>
</div>

<div>

<div v-click=[1] class="flex flex-col space-y-2">

  <!-- Title and icons -->
  <div class="flex justify-end">
    <img src="https://numba.pydata.org/_static/numba-blue-icon-rgb.svg" width="24" />
    <img src="https://raw.githubusercontent.com/jax-ml/jax/main/images/jax_logo_250px.png" width=36>
  </div>

  <!-- Code block -->
  <div>
```python
from qibo import set_backend

# Use numba
set_backend("qibojit", platform="numba")

# Use jax
set_backend("qiboml", platform="jax")
```
</div>
</div>

<div v-click=[2] class="flex flex-col space-y-2" v-motion
  :initial="{ x: -40, y: -170}"
  :enter="{ x: 0 }"
  :leave="{ x: 50 }">

  <!-- Title and icons -->
  <div class="flex justify-end">
    <img src="https://raw.githubusercontent.com/cupy/cupy/main/docs/image/cupy_logo_1000px.png" width="64" />
	<img src="https://camo.githubusercontent.com/59f1d1cd5dc5748444d385a7c17d0652001ba959ada26e6bc93a0f82569900a1/68747470733a2f2f646576656c6f7065722e6e76696469612e636f6d2f73697465732f64656661756c742f66696c65732f616b616d61692f6e76696469612d63757175616e74756d2d69636f6e2e737667" width=24/>
    <img src="https://github.com/pytorch/pytorch/raw/main/docs/source/_static/img/pytorch-logo-dark.png" width=128>
	<img src="https://www.gstatic.com/devrel-devsite/prod/vd9663438c989ac592eff7c92ff013bc8fa2578bc40babda19f4e44265d95782f/tensorflow/images/lockup.svg" width=128>
  </div>

  <!-- Code block -->
  <div>
```python
from qibo import set_backend

# Use cupy
set_backend("qibojit", platform="cupy")

# Use nvidia cuquantum
set_backend("qibojit", platform="cuquantum")

# Use torch 
set_backend("qiboml", platform="pytorch")

# Use tensorflow
set_backend("qiboml", platform="tensorflow")
```
</div>
</div>

<div v-click=[3] class="flex flex-col space-y-2" v-motion
  :initial="{ x: -40, y: -470}"
  :enter="{ x: 0 }"
  :leave="{ x: 50 }">

  <!-- Title and icons -->
  <div class="flex justify-end">
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/51/IBM_logo.svg/250px-IBM_logo.svg.png" width="48"/>
	<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/Amazon_Web_Services_Logo.svg/250px-Amazon_Web_Services_Logo.svg.png" width="36">
	<img src="https://avatars.githubusercontent.com/u/25356822?s=200&v=4" width=24>
	<img src="https://avatars.githubusercontent.com/u/59836348?s=200&v=4" width=24>
  </div>

  <!-- Code block -->
  <div>
```python
from qibo import set_backend

# Use ibmq
set_backend("qibo-cloud-backends", platform="qiskit-client")

# Use aws
set_backend("qibo-cloud-backends", platform="braket-client")

# Use ionq
set_backend("qibo-cloud-backends", platform="ionq-client")

# Use qibo at TII
set_backend("qibo-cloud-backends", platform="qibo-client")
```
</div>
</div>


<div v-click=[4,5] class="flex flex-col space-y-2" v-motion
  :initial="{ x: -40, y: -670}"
  :enter="{ x: 0 }"
  :leave="{ x: 50 }">

  <!-- Title and icons -->
  <div class="flex justify-end">
    <img src="https://raw.githubusercontent.com/qiboteam/qibo/refs/heads/master/doc/source/_static/qibo_logo_dark.svg" width=48></img>
  </div>

  <!-- Code block -->
  <div>
```python
from qibo import set_backend

# Use your selfhosted device through qibolab!
set_backend("qibolab", platform="my_local_platform")
```

</div>
</div>


</div>

</div>

---

# What is Slidev?

Slidev is a slides maker and presenter designed for developers, consist of the following features

- 📝 **Text-based** - focus on the content with Markdown, and then style them later
- 🎨 **Themable** - themes can be shared and re-used as npm packages
- 🧑‍💻 **Developer Friendly** - code highlighting, live coding with autocompletion
- 🤹 **Interactive** - embed Vue components to enhance your expressions
- 🎥 **Recording** - built-in recording and camera view
- 📤 **Portable** - export to PDF, PPTX, PNGs, or even a hostable SPA
- 🛠 **Hackable** - virtually anything that's possible on a webpage is possible in Slidev
<br>
<br>

Read more about [Why Slidev?](https://sli.dev/guide/why)

<!--
You can have `style` tag in markdown to override the style for the current page.
Learn more: https://sli.dev/features/slide-scope-style
-->

<style>
h1 {
  background-color: #2B90B6;
  background-image: linear-gradient(45deg, #4EC5D4 10%, #146b8c 20%);
  background-size: 100%;
  -webkit-background-clip: text;
  -moz-background-clip: text;
  -webkit-text-fill-color: transparent;
  -moz-text-fill-color: transparent;
}
</style>

<!--
Here is another comment.
-->

---
transition: slide-up
level: 2
---

# Navigation

Hover on the bottom-left corner to see the navigation's controls panel, [learn more](https://sli.dev/guide/ui#navigation-bar)

## Keyboard Shortcuts

|                                                     |                             |
| --------------------------------------------------- | --------------------------- |
| <kbd>right</kbd> / <kbd>space</kbd>                 | next animation or slide     |
| <kbd>left</kbd>  / <kbd>shift</kbd><kbd>space</kbd> | previous animation or slide |
| <kbd>up</kbd>                                       | previous slide              |
| <kbd>down</kbd>                                     | next slide                  |

<!-- https://sli.dev/guide/animations.html#click-animation -->
<img
  v-click
  class="absolute -bottom-9 -left-7 w-80 opacity-50"
  src="https://sli.dev/assets/arrow-bottom-left.svg"
  alt=""
/>
<p v-after class="absolute bottom-23 left-45 opacity-30 transform -rotate-10">Here!</p>

---
layout: two-cols
layoutClass: gap-16
---

# Table of contents

You can use the `Toc` component to generate a table of contents for your slides:

```html
<Toc minDepth="1" maxDepth="1" />
```

The title will be inferred from your slide content, or you can override it with `title` and `level` in your frontmatter.

::right::

<Toc text-sm minDepth="1" maxDepth="2" />

---
layout: image-right
image: https://cover.sli.dev
---

# Code

Use code snippets and get the highlighting directly, and even types hover!

```ts [filename-example.ts] {all|4|6|6-7|9|all} twoslash
// TwoSlash enables TypeScript hover information
// and errors in markdown code blocks
// More at https://shiki.style/packages/twoslash
import { computed, ref } from 'vue'

const count = ref(0)
const doubled = computed(() => count.value * 2)

doubled.value = 2
```

<arrow v-click="[4, 5]" x1="350" y1="310" x2="195" y2="342" color="#953" width="2" arrowSize="1" />

<!-- This allow you to embed external code blocks -->
<<< @/snippets/external.ts#snippet

<!-- Footer -->

[Learn more](https://sli.dev/features/line-highlighting)

<!-- Inline style -->
<style>
.footnotes-sep {
  @apply mt-5 opacity-10;
}
.footnotes {
  @apply text-sm opacity-75;
}
.footnote-backref {
  display: none;
}
</style>

<!--
Notes can also sync with clicks

[click] This will be highlighted after the first click

[click] Highlighted with `count = ref(0)`

[click:3] Last click (skip two clicks)
-->

---
level: 2
---

# Shiki Magic Move

Powered by [shiki-magic-move](https://shiki-magic-move.netlify.app/), Slidev supports animations across multiple code snippets.

Add multiple code blocks and wrap them with <code>````md magic-move</code> (four backticks) to enable the magic move. For example:

````md magic-move {lines: true}
```ts {*|2|*}
// step 1
const author = reactive({
  name: 'John Doe',
  books: [
    'Vue 2 - Advanced Guide',
    'Vue 3 - Basic Guide',
    'Vue 4 - The Mystery'
  ]
})
```

```ts {*|1-2|3-4|3-4,8}
// step 2
export default {
  data() {
    return {
      author: {
        name: 'John Doe',
        books: [
          'Vue 2 - Advanced Guide',
          'Vue 3 - Basic Guide',
          'Vue 4 - The Mystery'
        ]
      }
    }
  }
}
```

```ts
// step 3
export default {
  data: () => ({
    author: {
      name: 'John Doe',
      books: [
        'Vue 2 - Advanced Guide',
        'Vue 3 - Basic Guide',
        'Vue 4 - The Mystery'
      ]
    }
  })
}
```

Non-code blocks are ignored.

```vue
<!-- step 4 -->
<script setup>
const author = {
  name: 'John Doe',
  books: [
    'Vue 2 - Advanced Guide',
    'Vue 3 - Basic Guide',
    'Vue 4 - The Mystery'
  ]
}
</script>
```
````

---

# Components

<div grid="~ cols-2 gap-4">
<div>

You can use Vue components directly inside your slides.

We have provided a few built-in components like `<Tweet/>` and `<Youtube/>` that you can use directly. And adding your custom components is also super easy.

```html
<Counter :count="10" />
```

<!-- ./components/Counter.vue -->
<Counter :count="10" m="t-4" />

Check out [the guides](https://sli.dev/builtin/components.html) for more.

</div>
<div>

```html
<Tweet id="1390115482657726468" />
```

<Tweet id="1390115482657726468" scale="0.65" />

</div>
</div>

<!--
Presenter note with **bold**, *italic*, and ~~striked~~ text.

Also, HTML elements are valid:
<div class="flex w-full">
  <span style="flex-grow: 1;">Left content</span>
  <span>Right content</span>
</div>
-->

---
class: px-20
---

# Themes

Slidev comes with powerful theming support. Themes can provide styles, layouts, components, or even configurations for tools. Switching between themes by just **one edit** in your frontmatter:

<div grid="~ cols-2 gap-2" m="t-2">

```yaml
---
theme: default
---
```

```yaml
---
theme: seriph
---
```

<img border="rounded" src="https://github.com/slidevjs/themes/blob/main/screenshots/theme-default/01.png?raw=true" alt="">

<img border="rounded" src="https://github.com/slidevjs/themes/blob/main/screenshots/theme-seriph/01.png?raw=true" alt="">

</div>

Read more about [How to use a theme](https://sli.dev/guide/theme-addon#use-theme) and
check out the [Awesome Themes Gallery](https://sli.dev/resources/theme-gallery).

---

# Clicks Animations

You can add `v-click` to elements to add a click animation.

<div v-click>

This shows up when you click the slide:

```html
<div v-click>This shows up when you click the slide.</div>
```

</div>

<br>

<v-click>

The <span v-mark.red="3"><code>v-mark</code> directive</span>
also allows you to add
<span v-mark.circle.orange="4">inline marks</span>
, powered by [Rough Notation](https://roughnotation.com/):

```html
<span v-mark.underline.orange>inline markers</span>
```

</v-click>

<div mt-20 v-click>

[Learn more](https://sli.dev/guide/animations#click-animation)

</div>

---

# Motions

Motion animations are powered by [@vueuse/motion](https://motion.vueuse.org/), triggered by `v-motion` directive.

```html
<div
  v-motion
  :initial="{ x: -80 }"
  :enter="{ x: 0 }"
  :click-3="{ x: 80 }"
  :leave="{ x: 1000 }"
>
  Slidev
</div>
```

<div class="w-60 relative">
  <div class="relative w-40 h-40">
    <img
      v-motion
      :initial="{ x: 800, y: -100, scale: 1.5, rotate: -50 }"
      :enter="final"
      class="absolute inset-0"
      src="https://sli.dev/logo-square.png"
      alt=""
    />
    <img
      v-motion
      :initial="{ y: 500, x: -100, scale: 2 }"
      :enter="final"
      class="absolute inset-0"
      src="https://sli.dev/logo-circle.png"
      alt=""
    />
    <img
      v-motion
      :initial="{ x: 600, y: 400, scale: 2, rotate: 100 }"
      :enter="final"
      class="absolute inset-0"
      src="https://sli.dev/logo-triangle.png"
      alt=""
    />
  </div>

  <div
    class="text-5xl absolute top-14 left-40 text-[#2B90B6] -z-1"
    v-motion
    :initial="{ x: -80, opacity: 0}"
    :enter="{ x: 0, opacity: 1, transition: { delay: 2000, duration: 1000 } }">
    Slidev
  </div>
</div>

<!-- vue script setup scripts can be directly used in markdown, and will only affects current page -->
<script setup lang="ts">
const final = {
  x: 0,
  y: 0,
  rotate: 0,
  scale: 1,
  transition: {
    type: 'spring',
    damping: 10,
    stiffness: 20,
    mass: 2
  }
}
</script>

<div
  v-motion
  :initial="{ x:35, y: 30, opacity: 0}"
  :enter="{ y: 0, opacity: 1, transition: { delay: 3500 } }">

[Learn more](https://sli.dev/guide/animations.html#motion)

</div>

---

# LaTeX

LaTeX is supported out-of-box. Powered by [KaTeX](https://katex.org/).

<div h-3 />

Inline $\sqrt{3x-1}+(1+x)^2$

Block
$$ {1|3|all}
\begin{aligned}
\nabla \cdot \vec{E} &= \frac{\rho}{\varepsilon_0} \\
\nabla \cdot \vec{B} &= 0 \\
\nabla \times \vec{E} &= -\frac{\partial\vec{B}}{\partial t} \\
\nabla \times \vec{B} &= \mu_0\vec{J} + \mu_0\varepsilon_0\frac{\partial\vec{E}}{\partial t}
\end{aligned}
$$

[Learn more](https://sli.dev/features/latex)

---

# Diagrams

You can create diagrams / graphs from textual descriptions, directly in your Markdown.

<div class="grid grid-cols-4 gap-5 pt-4 -mb-6">

```mermaid {scale: 0.5, alt: 'A simple sequence diagram'}
sequenceDiagram
    Alice->John: Hello John, how are you?
    Note over Alice,John: A typical interaction
```

```mermaid {theme: 'neutral', scale: 0.8}
graph TD
B[Text] --> C{Decision}
C -->|One| D[Result 1]
C -->|Two| E[Result 2]
```

```mermaid
mindmap
  root((mindmap))
    Origins
      Long history
      ::icon(fa fa-book)
      Popularisation
        British popular psychology author Tony Buzan
    Research
      On effectiveness<br/>and features
      On Automatic creation
        Uses
            Creative techniques
            Strategic planning
            Argument mapping
    Tools
      Pen and paper
      Mermaid
```

```plantuml {scale: 0.7}
@startuml

package "Some Group" {
  HTTP - [First Component]
  [Another Component]
}

node "Other Groups" {
  FTP - [Second Component]
  [First Component] --> FTP
}

cloud {
  [Example 1]
}

database "MySql" {
  folder "This is my folder" {
    [Folder 3]
  }
  frame "Foo" {
    [Frame 4]
  }
}

[Another Component] --> [Example 1]
[Example 1] --> [Folder 3]
[Folder 3] --> [Frame 4]

@enduml
```

</div>

Learn more: [Mermaid Diagrams](https://sli.dev/features/mermaid) and [PlantUML Diagrams](https://sli.dev/features/plantuml)

---
foo: bar
dragPos:
  square: 691,32,167,_,-16
---

# Draggable Elements

Double-click on the draggable elements to edit their positions.

<br>

###### Directive Usage

```md
<img v-drag="'square'" src="https://sli.dev/logo.png">
```

<br>

###### Component Usage

```md
<v-drag text-3xl>
  <div class="i-carbon:arrow-up" />
  Use the `v-drag` component to have a draggable container!
</v-drag>
```

<v-drag pos="663,206,261,_,-15">
  <div text-center text-3xl border border-main rounded>
    Double-click me!
  </div>
</v-drag>

<img v-drag="'square'" src="https://sli.dev/logo.png">

###### Draggable Arrow

```md
<v-drag-arrow two-way />
```

<v-drag-arrow pos="67,452,253,46" two-way op70 />

---
src: ./pages/imported-slides.md
hide: false
---

---

# Monaco Editor

Slidev provides built-in Monaco Editor support.

Add `{monaco}` to the code block to turn it into an editor:

```ts {monaco}
import { ref } from 'vue'
import { emptyArray } from './external'

const arr = ref(emptyArray(10))
```

Use `{monaco-run}` to create an editor that can execute the code directly in the slide:

```ts {monaco-run}
import { version } from 'vue'
import { emptyArray, sayHello } from './external'

sayHello()
console.log(`vue ${version}`)
console.log(emptyArray<number>(10).reduce(fib => [...fib, fib.at(-1)! + fib.at(-2)!], [1, 1]))
```

---
layout: center
class: text-center
---

# Learn More

[Documentation](https://sli.dev) · [GitHub](https://github.com/slidevjs/slidev) · [Showcases](https://sli.dev/resources/showcases)

<PoweredBySlidev mt-10 />
